<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Tiiktak&#39;s</title>
    <link>https://example.com/categories/python/</link>
    <description>Recent content in Python on Tiiktak&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Sep 2020 19:22:57 +0800</lastBuildDate><atom:link href="https://example.com/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>查看当前使用的Python的安装路径</title>
      <link>https://example.com/blog/show_python_installation_path/</link>
      <pubDate>Fri, 25 Sep 2020 19:22:57 +0800</pubDate>
      
      <guid>https://example.com/blog/show_python_installation_path/</guid>
      <description>如题，代码如下：
import sys python_path = sys.executable print(python_path) 如图：</description>
    </item>
    
    <item>
      <title>python库opencv,py-opencv,libopencv的区别</title>
      <link>https://example.com/blog/difference_between_opencv_pyopencv_libopencv/</link>
      <pubDate>Tue, 07 Jul 2020 23:52:11 +0800</pubDate>
      
      <guid>https://example.com/blog/difference_between_opencv_pyopencv_libopencv/</guid>
      <description>通常我们在Python中安装OpenCV都是直接用pip install opencv-python
今天想用Anaconda Navigator安装的时候，在面板中搜索到有libopencv, opencv, py-opencv共三个包，而且三者的描述都是同样的’Computer vision and machine learning software library‘，瞬间迷惑:laughing:
找到介绍如下：
 OpenCV is computer vision a library written using highly optimized C/C++ code. It makes use of multiprocessing in the background. It has a collection of a large number of algorithms tested and verifiend by the developers. The best thing about this is it&amp;rsquo;s FREE under the BSD license. libopencv is only a metapackage. These packages do not contain actual software, they simply depend on other packages to be installed.</description>
    </item>
    
    <item>
      <title>Python面向对象_super()函数</title>
      <link>https://example.com/blog/python_super/</link>
      <pubDate>Wed, 12 Feb 2020 17:12:47 +0800</pubDate>
      
      <guid>https://example.com/blog/python_super/</guid>
      <description>super() super()是用于**调用父类（超类）**的一个方法
用于解决多重继承问题：直接用类名调用父类方法在使用单继承时没有问题，但若使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等问题
 MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。
 语法 super(type[, object-or-type]) 参数   type 类
  object-or-type 类，一般是self
  在 Python3 中：super().xxx
在 Python2 中：super(Class, self).xxx
两者等价
示例 class Bird: def __init__(self): self.hungry = True def eat(self): if self.hungry: print(&amp;#39;Ahahahah&amp;#39;) else: print(&amp;#39;No thanks!&amp;#39;) class SongBird(Bird): def __init__(self): self.sound = &amp;#39;Squawk&amp;#39; def sing(self): print(self.sound) sb = SongBird() sb.sing() # 能正常输出&amp;#39;Squawk&amp;#39; sb.eat() # 报错，因为 SongBird 中没有 hungry 特性 使用super解决：</description>
    </item>
    
    <item>
      <title>Python中eval()与format()</title>
      <link>https://example.com/blog/python%E4%B8%ADeval%E4%B8%8Eformat/</link>
      <pubDate>Thu, 10 Oct 2019 20:37:31 +0800</pubDate>
      
      <guid>https://example.com/blog/python%E4%B8%ADeval%E4%B8%8Eformat/</guid>
      <description>今天在做mooc课程《Python语言程序设计》的练习题时，遇到一道题，硬生生纠结了半个小时，结果发现答案居然只是短短的两行，这功力不够果然还是不行啊，用C的思维去写Python怕是要纠结死🤔
先看看题
题目 数值运算
描述 获得用户输入的一个字符串，格式如下：
M OP N 其中，M和N是任何数字，OP代表一种操作，表示为如下四种：+, -, *, /（加减乘除）
根据OP，输出M OP N‬的运算结果，统一保留小数点后两位
注意：M和OP、OP和N之间可以存在多个空格，不考虑输入错误情况
示例输入‪ 10 + 100 1 / 20 示例输出 110.00 0.05 解答 我最开始的想法是读入字符串，然后根据空格分为M、OP和N，之后再转换为int型进行计算
然而，我却完全忘记了Python有着eval()的存在&amp;hellip;.
eval() |eval()函数用来执行一个字符串表达式，并返回表达式的值 ‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫
eval(expression[, globals[, locals]])  参数
  expression &amp;ndash; 表达式
  globals &amp;ndash; 变量作用域，全局命名空间，若被提供，必须是一个字典对象
  locals &amp;ndash; 变量作用域，局部命名空间，若被提供，可以是任何映射对象
 可见，使用eval()后，就不需要我们自己对用户输入的算式进行处理，只需要直接调用，函数会自动帮我们计算结果
之后根据题意，我们还要将运算结果保留两位小数，这时format()就派上了用场
format() 这是一种格式化字符串的函数，基本语法是使用{}和: ‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮ |format()‫‬‪‬‪函数‬‪‬‪‬可以接受不限个参数，位置可以不按顺序
&amp;gt;&amp;gt;&amp;gt; &amp;#34;{} {}&amp;#34;.format(&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;) # 不设置指定位置，按默认顺序 &amp;#39;hello world&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#34;{0} {1}&amp;#34;.</description>
    </item>
    
    <item>
      <title>Python文本进度条</title>
      <link>https://example.com/blog/python%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1/</link>
      <pubDate>Thu, 19 Sep 2019 20:59:58 +0800</pubDate>
      
      <guid>https://example.com/blog/python%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1/</guid>
      <description> Update：使用python库tqdm轻松实现
 一个小程序，用Python在控制台中打印进度条，主要使用time库对时间进行控制，利用了\r转义符使光标回到当前行首的特性，通过多次打印进度条实现动画效果
代码 import time scale = 50 # 进度条长度 print(&amp;#34;&amp;gt;&amp;gt;执行开始\n&amp;#34;) start = time.perf_counter() # 开始时刻 for i in range(scale+1): a = &amp;#39;|&amp;#39; * i b = &amp;#39;.&amp;#39; * (scale - i) c = (i / scale) * 100 dur = time.perf_counter() - start # 当前用时 print(&amp;#34;\r{:^3.0f}% [{}&amp;gt;&amp;gt;{}] {:.2f}s&amp;#34;.format(c, a, b, dur), end=&amp;#39;&amp;#39;) # 打印进度条 time.sleep(0.1) # 休息时间，调整速度 print(&amp;#34;\n\n&amp;gt;&amp;gt;执行结束&amp;#34;) 效果 </description>
    </item>
    
    <item>
      <title>Python split()函数</title>
      <link>https://example.com/blog/python_split%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 16 Sep 2019 20:13:56 +0800</pubDate>
      
      <guid>https://example.com/blog/python_split%E5%87%BD%E6%95%B0/</guid>
      <description>原型 str.split(str=&amp;#34;&amp;#34;, num=string.count(str)) |split()函数通过指定分隔符对字符串进行切片
参数 若参数str无指定值。默认为所有的空字符，包括空格、\n、\t等
若参数num有指定值，则分割num+1个子字符串，若无指定值，默认-1，即分隔所有
返回值 返回分割后的字符串列表</description>
    </item>
    
    <item>
      <title>Zen of Python -Python之禅</title>
      <link>https://example.com/blog/zen_of_python/</link>
      <pubDate>Sat, 07 Sep 2019 21:07:51 +0800</pubDate>
      
      <guid>https://example.com/blog/zen_of_python/</guid>
      <description>在浏览Python官方文档时无意发现了这个彩蛋，只需在终端中import this
The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren&#39;t special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess.</description>
    </item>
    
    <item>
      <title>Python文件操作</title>
      <link>https://example.com/blog/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 07 Sep 2019 20:31:38 +0800</pubDate>
      
      <guid>https://example.com/blog/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>Python内置了读写文件的函数，用法与C兼容
读文件 open() 使用内置的open()函数，传入文件名和标识符：
&amp;gt;&amp;gt;&amp;gt; f = open(&amp;#39;test.txt&amp;#39;, &amp;#39;r&amp;#39;) 若文件不存在，open()函数会抛出一个IOError的错误，并给出错误码和详细信息
Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; FileNotFoundError: [Errno 2] No such file or directory: &amp;#39;test.txt&amp;#39; read() 打开成功后，使用read()一次性读取文件的全部内容，Python将内容读到内存中，用str对象存储
readline() |readline()可以每次读取一行的内容
readlines() |readlines()一次读取所有内容并按行返回list
close() 使用完毕后，需要调用close()关闭文件
with语句 为避免忘记调用close()，Python引入with语句自动调用close()
with open(&amp;#39;test.txt&amp;#39;, &amp;#39;r&amp;#39;) as f: print(f.read()) 写文件 与读文件类似，唯一区别是传入标识符&#39;w&#39;或&#39;wb&#39;表示写文本文件或写二进制文件
所有标识符定义及其意义见官方文档
file-like Object (file object文件对象) 在Python中，像open()函数返回的这种有read()或write()方法的对象统称为file-like Object（或file object）
共有三种类别的文件对象：原始二进制文件, 缓冲二进制文件 以及 文本文件，创建文件对象的规范方式是使用open()函数。</description>
    </item>
    
    <item>
      <title>Python调试</title>
      <link>https://example.com/blog/python%E8%B0%83%E8%AF%95/</link>
      <pubDate>Sat, 07 Sep 2019 19:08:46 +0800</pubDate>
      
      <guid>https://example.com/blog/python%E8%B0%83%E8%AF%95/</guid>
      <description>Python中可以使用断言assert,logging等来进行调试
断言 def fun(s): n = int(s) assert n != 0, &amp;#39;n is zero!&amp;#39; return 10 / n def main(): fun(&amp;#39;0&amp;#39;) 若assert后面的语句不为True，则assert会抛出异常AssertionError，并显示后一句&#39;n is zero&#39;:
Traceback (most recent call last): File &amp;#34;hello.py&amp;#34;, line 12, in &amp;lt;module&amp;gt; main() File &amp;#34;hello.py&amp;#34;, line 9, in main fun(&amp;#39;0&amp;#39;) File &amp;#34;hello.py&amp;#34;, line 4, in fun assert n != 0, &amp;#39;n is zero!&amp;#39; AssertionError: n is zero! 在我们不需要使用assert时可以在启动Python解释器时，添加-O(大写字母O)参数来关闭断言：
..path:&amp;gt; python -O hello.py Traceback (most recent call last): File &amp;#34;hello.</description>
    </item>
    
    <item>
      <title>Python错误处理</title>
      <link>https://example.com/blog/python%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 06 Sep 2019 19:14:26 +0800</pubDate>
      
      <guid>https://example.com/blog/python%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>在Python中也同样使用try...except...finally...的错误处理机制
try except try: print(&amp;#39;try...&amp;#39;) r = 10/0 print(&amp;#39;result:&amp;#39;, r) except ZeroDivisionError as e: print(&amp;#39;except:&amp;#39;, e) finally: print(&amp;#39;finally...&amp;#39;) print(&amp;#39;END&amp;#39;) 当认为某一块代码有错误时，就可以用try来运行该段代码，若执行出错，则后续代码不会执行，而会跳转到except块，执行完except后，若后续有finally片段，则执行finally块
上面的代码中有一个除0的错误，运行结果:
try... except: division by zero finally... END 当计算r后，捕捉到ZeroDivisionError错误，执行	except语句段，之后执行finally
else 可以在except后面加上else，当没有错误发生时将执行else语句块
try: print(&amp;#39;try...&amp;#39;) r = 10/5 print(&amp;#39;result:&amp;#39;, r) except ZeroDivisionError as e: print(&amp;#39;except:&amp;#39;, e) else: print(&amp;#39;no error&amp;#39;) print(&amp;#39;END&amp;#39;) 结果:
try... result: 2.0 no error END  Python的错误是一个class，所有错误类型都继承自BaseException，故使用except时需注意它会也会捕获该类型的子类。
  常见错误类型及继承关系（中文）：官方文档
  ## 优势 使用```try...except```捕获错误还有一个巨大的好处，就是可以跨越多层调用，比如函数```main()```调用```fun()```，```fun()```调用```bar()```，结果```bar()```出错了，这时，只要```main()```捕获到了，就可以处理 ​```py def fun(s): return 10/int(s) def bar(s): return fun(s) * 2 def main(): try: print(&#39;try.</description>
    </item>
    
    <item>
      <title>Python面向对象</title>
      <link>https://example.com/blog/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 21 Jun 2019 15:23:06 +0800</pubDate>
      
      <guid>https://example.com/blog/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>类和实例 定义类 使用class关键字
class Student(object): #class 类名(继承类) 无继承类则使用object,也可省略 &amp;#34;&amp;#34;&amp;#34;docstring for Student&amp;#34;&amp;#34;&amp;#34; def __init__(self, name, score): #初始属性，第一个参数永远是self，表示创建的实例本身 super (Student, self).__init__() self.name = name self.score = score def print_score(self) print(&amp;#39;%s: %s&amp;#39; % (self.name, self.score)) 实例化 类名+（）
&amp;gt;&amp;gt;&amp;gt; bob = Student(&amp;#39;Bob&amp;#39;, 98) &amp;gt;&amp;gt;&amp;gt; bob.print_score() Bob: 98 创建实例后，可以自由地给一个实例变量绑定属性，如
&amp;gt;&amp;gt;&amp;gt; bob.school = &amp;#39;SWUST&amp;#39; &amp;gt;&amp;gt;&amp;gt; bob.school &amp;#39;SWUST&amp;#39; 访问限制  private私有变量：变量名以__开头 注意：__name__外部可以访问，是特殊变量  继承和多态 基类：
class Animal(object): def run(self): print(&amp;#39;Animal is running...&amp;#39;) 子类：
class Dog(Animal) pass 子类调用父类方法：</description>
    </item>
    
    <item>
      <title>Python函数式编程</title>
      <link>https://example.com/blog/python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 21 Jun 2019 10:50:55 +0800</pubDate>
      
      <guid>https://example.com/blog/python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>[toc]
什么是函数式编程？ 函数式编程是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。
而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的
函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！
Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言
高阶函数 Python中函数两个特性
 变量可以指向函数  函数本身可以赋值给变量，通过变量可以调用函数
&amp;gt;&amp;gt;&amp;gt; f = abs &amp;gt;&amp;gt;&amp;gt; f(-10) 10  函数名是变量  把函数名看作变量，可将其指向其他对象，则无法调用原函数
&amp;gt;&amp;gt;&amp;gt; abs = 10 &amp;gt;&amp;gt;&amp;gt; abs(-10) Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; TypeError: &amp;#39;int&amp;#39; object is not callable 传入函数 由于变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数
一个最简单的高阶函数：
def add(x, y, f) return f(x) + f(y) 当调用add(-5, -6, abs)时，函数计算abs(-5)+abs(-6)，返回11
 把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式
  Python内建高阶函数 map()函数 |map() 函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回
def f(x): return x * x &amp;gt;&amp;gt;&amp;gt; r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9]) &amp;gt;&amp;gt;&amp;gt; list(r) [1, 4, 9, 16, 25, 36, 49, 64, 81] reduce()函数 |reduce 把一个函数作用在一个序列[x1, x2, x3, .</description>
    </item>
    
    <item>
      <title>Python中set集合</title>
      <link>https://example.com/blog/python%E4%B8%ADset%E9%9B%86%E5%90%88/</link>
      <pubDate>Thu, 20 Jun 2019 16:18:07 +0800</pubDate>
      
      <guid>https://example.com/blog/python%E4%B8%ADset%E9%9B%86%E5%90%88/</guid>
      <description>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。
创建set 传入一个list，重复元素会被自动过滤，显示的顺序并不表示set是有序的
&amp;gt;&amp;gt;&amp;gt; s = set([1, 1, 2, 2, 3, 3]) &amp;gt;&amp;gt;&amp;gt; s {1, 2, 3} 添加元素 &amp;gt;&amp;gt;&amp;gt; s.add(4) &amp;gt;&amp;gt;&amp;gt; s {1, 2, 3, 4} 删除元素 &amp;gt;&amp;gt;&amp;gt; s.remove(3) &amp;gt;&amp;gt;&amp;gt; s {1, 2, 4} 交并集 set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作
&amp;gt;&amp;gt;&amp;gt; s1 = set([1, 2, 3]) &amp;gt;&amp;gt;&amp;gt; s2 = set([2, 3, 4]) &amp;gt;&amp;gt;&amp;gt; s1 &amp;amp; s2 {2, 3} &amp;gt;&amp;gt;&amp;gt; s1 | s2 {1, 2, 3, 4} </description>
    </item>
    
    <item>
      <title>Python中dict字典</title>
      <link>https://example.com/blog/python%E4%B8%ADdict%E5%AD%97%E5%85%B8/</link>
      <pubDate>Thu, 20 Jun 2019 15:15:34 +0800</pubDate>
      
      <guid>https://example.com/blog/python%E4%B8%ADdict%E5%AD%97%E5%85%B8/</guid>
      <description>dict全称dictionary，在其他语言中也称为map，使用**键-值（key-value）**存储，具有极快的查找速度
创建dict &amp;gt;&amp;gt;&amp;gt; d = {&amp;#39;Michael&amp;#39;: 95, &amp;#39;Bob&amp;#39;: 75, &amp;#39;Tracy&amp;#39;: 85} &amp;gt;&amp;gt;&amp;gt; d[&amp;#39;Michael&amp;#39;] 95 内部实现方法 先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。
加入数据 把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：
&amp;gt;&amp;gt;&amp;gt; d[&amp;#39;Tony&amp;#39;] = 99 &amp;gt;&amp;gt;&amp;gt; d {&amp;#39;Michael&amp;#39;: 95, &amp;#39;Bob&amp;#39;: 75, &amp;#39;Tracy&amp;#39;: 85, &amp;#39;Tony&amp;#39;: 99} 查询key是否存在 使用in &amp;gt;&amp;gt;&amp;gt; &amp;#39;Thomas&amp;#39; in d False &amp;gt;&amp;gt;&amp;gt; &amp;#39;Bob&amp;#39; in d True 使用get() 如果key不存在，返回None，或者自己指定的value
&amp;gt;&amp;gt;&amp;gt; d.get(&amp;#39;Thomas&amp;#39;) #返回None时Python交互环境不显示 &amp;gt;&amp;gt;&amp;gt; d.get(&amp;#39;Thomas&amp;#39;, -1) -1 删除key 删除一个key，用pop(key)方法，对应的value也会从dict中删除，返回删除的value
&amp;gt;&amp;gt;&amp;gt; d.pop(&amp;#39;Bob&amp;#39;) 75 &amp;gt;&amp;gt;&amp;gt; d {&amp;#39;Michael&amp;#39;: 95, &amp;#39;Tracy&amp;#39;: 85, &amp;#39;Tony&amp;#39;: 99} 注意 dict内部存放顺序与key放入顺序无关 dict的key必须是不可变对象 实质：哈希表</description>
    </item>
    
    <item>
      <title>Python常见数据类型——Tuple元组</title>
      <link>https://example.com/blog/python%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Btuple%E5%85%83%E7%BB%84/</link>
      <pubDate>Thu, 20 Jun 2019 13:46:10 +0800</pubDate>
      
      <guid>https://example.com/blog/python%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Btuple%E5%85%83%E7%BB%84/</guid>
      <description>tuple和list非常类似，但是tuple一旦初始化就不能修改
[toc]
创建tuple &amp;gt;&amp;gt;&amp;gt; classmates = (&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;) 此时，classmates这个tuple不能改变，它也没有append()，insert()这样的方法。
其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能将其赋值为另外的元素。
因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。
空tuple &amp;gt;&amp;gt;&amp;gt; t = () &amp;gt;&amp;gt;&amp;gt; t () 只有一个元素的tuple 错误写法 不能直接使用括号()!!!
&amp;gt;&amp;gt;&amp;gt; t = (1) &amp;gt;&amp;gt;&amp;gt; t 1 #定义的不是tuble，而是一个数 正解 加一个逗号，消除歧义
&amp;gt;&amp;gt;&amp;gt; t = (1,) &amp;gt;&amp;gt;&amp;gt; t (1,) &amp;ldquo;可变&amp;quot;的tuble 当tuble中包含list元素时，仍然可以对list进行修改，tuble仍指向该list
&amp;gt;&amp;gt;&amp;gt; t = (1, [&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;, &amp;#39;z&amp;#39;]) &amp;gt;&amp;gt;&amp;gt; t[1][2] = &amp;#39;a&amp;#39; &amp;gt;&amp;gt;&amp;gt; t (1, [&amp;#39;x&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;z&amp;#39;]) 个人理解：tuble相当于一个指针数组，指向每个元素，对元素本身的更改并不会影响tuble的指向</description>
    </item>
    
    <item>
      <title>Python常见数据类型——List列表</title>
      <link>https://example.com/blog/python%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Blist%E5%88%97%E8%A1%A8/</link>
      <pubDate>Thu, 20 Jun 2019 13:44:48 +0800</pubDate>
      
      <guid>https://example.com/blog/python%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Blist%E5%88%97%E8%A1%A8/</guid>
      <description>Python常见数据类型——List列表 list是一种有序的集合，可随时增删元素
[toc]
创建list &amp;gt;&amp;gt;&amp;gt; classmates = [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;] &amp;gt;&amp;gt;&amp;gt; classmates [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;] &amp;gt;&amp;gt;&amp;gt; len(classmates) 3 访问某个位置元素 使用索引地址访问
&amp;gt;&amp;gt;&amp;gt; classmates[0] &amp;#39;A&amp;#39; &amp;gt;&amp;gt;&amp;gt; classmates[-1] #返回最后一项元素 &amp;#39;C&amp;#39; 追加元素到末尾 &amp;gt;&amp;gt;&amp;gt; classmates.append(&amp;#39;D&amp;#39;) &amp;gt;&amp;gt;&amp;gt; classmates [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;] 插入元素到指定位置 &amp;gt;&amp;gt;&amp;gt; classmates.insert(1, &amp;#39;Here&amp;#39;) #在指定位置放入元素 &amp;gt;&amp;gt;&amp;gt; classmates [&amp;#39;A&amp;#39;, &amp;#39;Here&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;] 删除元素 使用pop 指定索引地址删除，返回删除的值
&amp;gt;&amp;gt;&amp;gt; classmates.pop(0) &amp;#39;A&amp;#39; &amp;gt;&amp;gt;&amp;gt; classmates [&amp;#39;Here&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;] 使用del 指定索引地址删除，无返回值
&amp;gt;&amp;gt;&amp;gt; del classmates[1] &amp;gt;&amp;gt;&amp;gt;classmates [&amp;#39;Here&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;] 使用remove 删除指定值的第一次出现，无返回值</description>
    </item>
    
  </channel>
</rss>
