<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MMDetection on Tiiktak&#39;s</title>
    <link>https://example.com/categories/mmdetection/</link>
    <description>Recent content in MMDetection on Tiiktak&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Dec 2020 15:52:48 +0800</lastBuildDate><atom:link href="https://example.com/categories/mmdetection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MMDetection单机多卡训练出现问题</title>
      <link>https://example.com/blog/mmdet_multiple_gpu_error/</link>
      <pubDate>Mon, 28 Dec 2020 15:52:48 +0800</pubDate>
      
      <guid>https://example.com/blog/mmdet_multiple_gpu_error/</guid>
      <description>使用的命令：
CUDA_VISIBLE_DEVICES=0,1,2,3 ./tools/dist_train.sh ${CONFIG_FILE} 4 --resume-from ${CHECKPOINT_FILE} 出现问题：
 模型train 1 epoch后挂掉，报错信息：  RuntimeError: replicas_[0].size() == rebuilt_param_indices_.size() INTERNAL ASSERT FAILED at &amp;#34;/pytorch/torch/csrc/distributed/c10d/reducer.cpp&amp;#34;:1326, please report a bug to PyTorch. rebuilt parameter indices size is not same as original model parameters size.321 versus 629160  pytorch github issue:https://github.com/pytorch/pytorch/issues/47050 mmcv issue: https://github.com/open-mmlab/mmcv/issues/636#issuecomment-722436575 解决方案：安装1.6版本pytorch，并重装mmcv  pip uninstall mmcv-full pip install mmcv-full python setup.py install </description>
    </item>
    
    <item>
      <title>MMDetection中使用Mask-RCNN训练BDD100K数据集</title>
      <link>https://example.com/blog/bdd100k_mmdet_mask-rcnn/</link>
      <pubDate>Thu, 08 Oct 2020 13:40:10 +0800</pubDate>
      
      <guid>https://example.com/blog/bdd100k_mmdet_mask-rcnn/</guid>
      <description>1. Convert label to COCO format 使用官方提供的工具bdd100k2coco.py
 注意：使用bdd100k2coco分支下的文件，master中的该文件无法正常使用
 在使用前，还需要对该文件进行部分修改：
# 将69行修改为	 image[&amp;#34;file_name&amp;#34;] = frame[&amp;#34;name&amp;#34;]+&amp;#34;.jpg&amp;#34; # 在73行之后增加 frame = frame[&amp;#34;frames&amp;#34;][0] 之后按如下方式运行
python bdd100k2coco.py -i {JSON文件夹路径} -o {输出一个coco json文件} -m {转换方式det or track，使用det即可} 调用两次分别将train、val数据集的label转换
2. Set COCO-like directory tree 按如下目录结构保存我们的数据集
data ├── annotations │ ├── instances_train2017.json # 训练集json │ ├── instances_val2017.json	# 验证集json ├── train2017 │ └── abcdefg-1234567.jpg │ └── ... ├── test2017 │ └── abcdefg-1234567.jpg │ └── ... ├── val2017 │ └── abcdefg-1234567.</description>
    </item>
    
    <item>
      <title>MMDetection安装过程记录</title>
      <link>https://example.com/blog/mmdet_install/</link>
      <pubDate>Mon, 05 Oct 2020 13:37:51 +0800</pubDate>
      
      <guid>https://example.com/blog/mmdet_install/</guid>
      <description>记录自本人安装过程，环境建议：
 Linux or macOS (Windows is not currently officially supported) Python 3.6+ PyTorch 1.3+ CUDA 9.2+ (If you build PyTorch from source, CUDA 9.0 is also compatible) GCC 5+  1. torch &amp;amp; torchvision 我使用的是 torch 1.5.1 + torchvision 0.6.1
pip install torch==1.5.1 torchvision==0.6.1 [-i https://pypi.douban.com/simple]
 https://pytorch.org/get-started/previous-versions/
 2. mmcv pip install mmcv-full
3. mmdetection git clone https://github.com/open-mmlab/mmdetection.git cd mmdetection pip install -r requirements/build.txt pip install -v -e .</description>
    </item>
    
  </channel>
</rss>
