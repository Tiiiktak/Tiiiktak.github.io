<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Tiiktak&#39;s</title>
    <link>https://konosuba.xyz/tags/python/</link>
    <description>Recent content in Python on Tiiktak&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Thu, 11 Feb 2021 12:14:03 +0800</lastBuildDate><atom:link href="https://konosuba.xyz/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>树莓派4B安装Pytorch, torchvision</title>
      <link>https://konosuba.xyz/blog/raspberripi_pytorch_install/</link>
      <pubDate>Thu, 11 Feb 2021 12:14:03 +0800</pubDate>
      
      <guid>https://konosuba.xyz/blog/raspberripi_pytorch_install/</guid>
      <description>Install Pytorch  Raspberry Pi 4B Linux raspberrypi 4.19.75-v7l+ #1270 SMP Tue Sep 24 18:51:41 BST 2019 armv7l GNU/Linux 2G RAM 16G DISK  增加交换内存   关闭内存交换: sudo dphys-swapfile swapoff
  修改配置文件 sudo vim /etc/dphys-swapfile，设置CONF_SWAPSIZE=4096
 这里虽然设置为4096，但free -m 查看仍然只有2G交换内存
   开启内存交换：sudo dphys-swapfile swapon
  检查：free -m，若swap无变换可尝试重启
  Pytorch依赖项 sudo apt install libopenblas-dev libblas-dev m4 cmake cython python3-yaml libatlas-base-devsudo apt-get install cython3 libatlas-base-dev m4 libblas-dev cmakesudo apt-get install python3-dev python3-setuptools python3-wheel python3-pillow python3-numpypip3 install numpy pyyamlFor raspberry pi 4 there may be an issue with the gcc and g++ version.</description>
    </item>
    
    <item>
      <title>Python面向对象</title>
      <link>https://konosuba.xyz/blog/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 21 Jun 2019 15:23:06 +0800</pubDate>
      
      <guid>https://konosuba.xyz/blog/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>类和实例 定义类 使用class关键字
class Student(object): #class 类名(继承类) 无继承类则使用object,也可省略 &amp;#34;&amp;#34;&amp;#34;docstring for Student&amp;#34;&amp;#34;&amp;#34; def __init__(self, name, score): #初始属性，第一个参数永远是self，表示创建的实例本身 super (Student, self).__init__() self.name = name self.score = score def print_score(self) print(&amp;#39;%s: %s&amp;#39; % (self.name, self.score)) 实例化 类名+（）
&amp;gt;&amp;gt;&amp;gt; bob = Student(&amp;#39;Bob&amp;#39;, 98) &amp;gt;&amp;gt;&amp;gt; bob.print_score() Bob: 98 创建实例后，可以自由地给一个实例变量绑定属性，如
&amp;gt;&amp;gt;&amp;gt; bob.school = &amp;#39;SWUST&amp;#39; &amp;gt;&amp;gt;&amp;gt; bob.school &amp;#39;SWUST&amp;#39; 访问限制  private私有变量：变量名以__开头 注意：__name__外部可以访问，是特殊变量  继承和多态 基类：
class Animal(object): def run(self): print(&amp;#39;Animal is running...&amp;#39;) 子类：
class Dog(Animal) pass 子类调用父类方法：</description>
    </item>
    
  </channel>
</rss>
