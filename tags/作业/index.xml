<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>作业 on Tiiktak&#39;s</title>
    <link>https://konosuba.xyz/tags/%E4%BD%9C%E4%B8%9A/</link>
    <description>Recent content in 作业 on Tiiktak&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Thu, 03 Jun 2021 11:25:47 +0800</lastBuildDate><atom:link href="https://konosuba.xyz/tags/%E4%BD%9C%E4%B8%9A/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利用OpenCV和C&#43;&#43;实现的&#39;全民飞机大战&#39;小游戏</title>
      <link>https://konosuba.xyz/blog/%E5%85%A8%E6%B0%91%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/</link>
      <pubDate>Thu, 03 Jun 2021 11:25:47 +0800</pubDate>
      
      <guid>https://konosuba.xyz/blog/%E5%85%A8%E6%B0%91%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/</guid>
      <description>项目简介 模仿手机游戏《全民飞机大战》，opencv实现
类图 演示视频  Source Code Tiiiktak/AircraftWarGame: (github.com)</description>
    </item>
    
    <item>
      <title>Mpich2_安装 Ubuntu 20.04LTS</title>
      <link>https://konosuba.xyz/blog/mpich2_ubuntu/</link>
      <pubDate>Tue, 17 Nov 2020 09:20:26 +0800</pubDate>
      
      <guid>https://konosuba.xyz/blog/mpich2_ubuntu/</guid>
      <description> Ubuntu 20.04 LTS    sudo aptitude install mpich
  mpiexec --version
 image-20201117092421973 
  new code
#include &amp;#34;mpi.h&amp;#34;#include &amp;lt;stdio.h&amp;gt; int main(void) { int rankID; int sizeNum; MPI_Init(0, 0); MPI_Comm_size(MPI_COMM_WORLD, &amp;amp;sizeNum); MPI_Comm_rank(MPI_COMM_WORLD, &amp;amp;rankID); printf(&amp;#34;Hello world! %d of total = %d\n&amp;#34;, rankID, sizeNum); MPI_Finalize(); return 0; }   mpicc demo_1.c -o demo_1
  mpirun -np 8 ./demo_1
  </description>
    </item>
    
    <item>
      <title>MSMPI Visual Studio 2019 配置</title>
      <link>https://konosuba.xyz/blog/msmpi_install/</link>
      <pubDate>Mon, 16 Nov 2020 22:14:03 +0800</pubDate>
      
      <guid>https://konosuba.xyz/blog/msmpi_install/</guid>
      <description>Windows 10 Visual Studio 2019 MSMPI v10.1.2  step1. 安装MSMPI 前往官网下载.msi &amp;amp; .exe两个文件，按提示安装即可
安装过程会自动添加环境变量，可在PATH中看到
step2. 配置 VS2019 新建一个空项目，新建一个属性表
包含目录、库目录
  包含目录里面添加：C:\Program Files (x86)\Microsoft SDKs\MPI\Include;
  库目录的里面添加：C:\Program Files (x86)\Microsoft SDKs\MPI\Lib\x64;
  【C/C+ 附加包含目录】：添加$(MSMPI_INC);$(MSMPI_INC)\x64
  【链接器-常规-附加库目录】：添加$(MSMPI_LIB64)
  【链接器-输入-附加依赖项】：添加msmpi.lib
  step3. 测试 #include &amp;lt;iostream&amp;gt; #include &amp;lt;mpi.h&amp;gt;  int main(int argc, char* argv[]) { MPI_Init(&amp;amp;argc, &amp;amp;argv); int RankID; MPI_Comm_rank(MPI_COMM_WORLD, &amp;amp;RankID); if (0 == RankID) { int SendNum = 16; MPI_Send(&amp;amp;SendNum, 1, MPI_INT, 1, 0, MPI_COMM_WORLD); } else if (1 == RankID) { int RecvNum = 0; MPI_Recv(&amp;amp;RecvNum, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE); std::cout &amp;lt;&amp;lt; &amp;#34;Receive from rank 0: &amp;#34; &amp;lt;&amp;lt; RecvNum &amp;lt;&amp;lt; std::endl; } MPI_Finalize(); return 0; }  image-20201116223527189</description>
    </item>
    
    <item>
      <title>校园出行APP原型设计</title>
      <link>https://konosuba.xyz/blog/project_manage_course_prototype_design/</link>
      <pubDate>Tue, 23 Jun 2020 13:58:14 +0800</pubDate>
      
      <guid>https://konosuba.xyz/blog/project_manage_course_prototype_design/</guid>
      <description>《软件过程与项目管理》 课程的期末作业，我们小组设计了一款校内出行APP，其中软件原型设计部分由我负责，使用PS和XD制作，在这里做个展示:laughing:
主视觉 海报2 该海报UI是旧版
各页面 HOME HOME-弹窗 HOME-Tips MORE MORE-包车 ME </description>
    </item>
    
    <item>
      <title>软件设计模式</title>
      <link>https://konosuba.xyz/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AE%9E%E9%AA%8C%E4%B8%80/</link>
      <pubDate>Sun, 31 May 2020 11:25:47 +0800</pubDate>
      
      <guid>https://konosuba.xyz/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AE%9E%E9%AA%8C%E4%B8%80/</guid>
      <description>1. 在某图形库API中提供了多种矢量图模板，用户可以基于这些矢量图创建不同的显示图形，图形库设计人员设计的初始类图如下所示
在该图形库中，每个图形类（如Circle、Triangle等）的init()方法用于初始化所创建的图形，setColor()方法用于给图形设置边框颜色，fill()方法用于给图形设置填充颜色，setSize()方法用于设置图形的大小，display()方法用于显示图形。
客户类(Client)在使用该图形库时发现存在如下问题：
  由于在创建窗口时每次只需要使用图形库中的一种图形，因此在更换图形时需要修改客户类源代码；
  在图形库中增加并使用新的图形时需要修改客户类源代码；
  客户类在每次使用图形对象之前需要先创建图形对象，有些图形的创建过程较为复杂，导致客户类代码冗长且难以维护。
  现需要根据面向对象设计原则对该系统进行重构，要求如下：
  隔离图形的创建和使用，将图形的创建过程封装在专门的类中，客户类在使用图形时无须直接创建图形对象，甚至不需要关心具体图形类类名；
  客户类能够方便地更换图形或使用新增图形，无须针对具体图形类编程，符合开闭原则。
  绘制重构之后的类图并说明在重构过程中所运用的面向对象设计原则。
重构之后的类图 重构过程中所使用的面向对象设计原则及简要说明 采用了工厂方法模式，所谓工厂模式则是定义一个用于创建对象的接口，但是让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到子类。使用了开闭原则，单一职责原则。
2. 设计一个可以创建不同几何形状(Shape)，如圆形(Circle)、矩形(Rectangle)和三角形(Triangle)等的绘图工具类，每个几何图形均具有绘制Draw()和擦除Erase()两个方法，要求在绘制不支持的几何图形时，抛出一个UnsupportedShapeException异常，绘制类图并编程模拟实现。
类图 3. 某软件公司为新开发的智能手机控制与管理软件提供了一键备份功能，通过该功能可以将原本存储在手机中的通信录、短信、照片、歌曲等资料一次性全部拷贝到移动存储介质（例如MMC卡或SD卡）中。在实现过程中需要与多个已有的类进行交互，例如通讯录管理类、短信管理类等，为了降低系统的耦合度，试设计并编程模拟实现该一键备份功能。
类图 4. 现需要设计一个程序来读取多种不同类型的图片格式，针对每一种图片格式都设计一个图片读取器(ImageReader)，如GIF图片读取器(GifReader)用于读取GIF格式的图片、JPG图片读取器(JpgReader)用于读取JPG格式的图片。图片读取器对象通过图片读取器工厂ImageReaderFactory来创建，ImageReaderFactory是一个抽象类，用于定义创建图片读取器的工厂方法，其子类GifReaderFactory和JpgReaderFactory用于创建具体的图片读取器对象。试设计该程序，绘制类图并编程模拟实现。需充分考虑系统的灵活性和可扩展性
类图 5. 现有一个接口DataOperation定义了排序方法sort(int[]) 和查找方法search(int[], int)，已知类QuickSort的quickSort(int[])方法实现了快速排序算法，类BinarySearch 的binarySearch(int[], int)方法实现了二分查找算法。如何在不修改源代码的情况下，使DataOperation接口可以复用类QuickSort和类BinarySearch的方法。请选用合适的模式编写程序模拟该场景。
类图 6. 请设计并实现一个“电脑配置商店”的小程序，要求如下：
  电脑由CPU、主板、显卡、内存、硬盘等配件组合而成。现电脑配置有两种配置方案。
  根据配置方案可以显示具体配置信息。
  根据配置方案可以显示价格。
  类图 7. 某软件公司要为某银行的业务支撑系统开发一个利息计算模块，利息的计算流程如下：
  系统根据账号和密码验证用户信息，如果用户信息错误，则系统显示出错提示。
  如果用户信息正确，则根据用户类型的不同使用不同的利息计算公式计算利息（如活期账户和定期账户具有不同的利息计算公式）。
  系统显示利息。
  现请使用模板方法模式设计该利息计算模块。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;解决假币问题</title>
      <link>https://konosuba.xyz/blog/%E5%81%87%E5%B8%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 30 Dec 2019 20:35:42 +0800</pubDate>
      
      <guid>https://konosuba.xyz/blog/%E5%81%87%E5%B8%81%E9%97%AE%E9%A2%98/</guid>
      <description>题目 一个袋子里有30个银币，其中一枚是假币，并且假币和真币一模一样，肉眼很难分辨，目前只知道假币比真币重量轻一点。请问，如何区分出假币？
分析 首先为每个银币编号，然后将所有的银币等分为两份，放在天平的两边。这样就将区分30个银币的问题变为区别两堆银币的问题。
因为假币分量较轻，因此天平较轻的一侧中一定包含假币。再将较轻的一侧中银币等分为两份，重复上述做法。直到剩下两枚银币，便可用天平直接找出假银币。类似于二分法
代码 由于这个是自己做的一个练习题，没有使用OJ判题，所以自己利用随机数生成银币的重量和假币相关信息
#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;ctime&amp;gt;using namespace std; void generate_seq(int coin[]) { srand(time(0)); int coin_weight = rand() % 100; int fake_weight = rand() % coin_weight; int fake_add = rand() % 30; for (int i = 1; i &amp;lt;= 30; i++) { if (i == fake_add) coin[i] = fake_weight; else coin[i] = coin_weight; } cout &amp;lt;&amp;lt; &amp;#34;fake_add=&amp;#34; &amp;lt;&amp;lt; fake_add &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; &amp;#34;fake_weight=&amp;#34; &amp;lt;&amp;lt; fake_weight &amp;lt;&amp;lt; endl; } void show_seq(int coin[]) { for (int i = 1; i &amp;lt;= 30; i++) { cout &amp;lt;&amp;lt; coin[i] &amp;lt;&amp;lt; &amp;#34; &amp;#34;; } cout &amp;lt;&amp;lt; endl; } int find_fake(int coin[], int begin, int end) { if (begin == end) return begin; double mid = (begin + end) / 2; int weight_a = 0, weight_b = 0; if ((end - begin + 1) % 2 == 0) //可等分  { for (int i = begin; i &amp;lt;= (int)mid; i++) weight_a += coin[i]; for (int i = (int)mid + 1; i &amp;lt;= end; i++) weight_b += coin[i]; cout &amp;lt;&amp;lt; begin &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; end &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; mid &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; weight_a &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; weight_b &amp;lt;&amp;lt; endl; if (weight_a &amp;lt; weight_b) find_fake(coin, begin, (int)mid); else find_fake(coin, (int)mid+1, end); }else //不可等分，中间留一个mid  { for (int i = begin; i &amp;lt; mid; i++) weight_a += coin[i]; for (int i = mid + 1; i &amp;lt;= end; i++) weight_b += coin[i]; cout &amp;lt;&amp;lt; begin &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; end &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; mid &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; weight_a &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; weight_b &amp;lt;&amp;lt; endl; if (weight_a &amp;lt; weight_b) find_fake(coin, begin, (int)mid - 1); else if (weight_a &amp;gt; weight_b) find_fake(coin, (int)mid + 1, end); else return mid; } } int main() { //产生随机数列  int coin[31]; generate_seq(coin); //打印数列  show_seq(coin); //找  int fake_add = find_fake(coin, 1, 30); cout &amp;lt;&amp;lt; &amp;#34;fake_add=&amp;#34; &amp;lt;&amp;lt; fake_add &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; &amp;#34;fake_weight=&amp;#34; &amp;lt;&amp;lt; coin[fake_add] &amp;lt;&amp;lt; endl; return 0; } </description>
    </item>
    
    <item>
      <title>【项目笔记】利用OpenCV的MLS图像扭曲变形实现</title>
      <link>https://konosuba.xyz/blog/image_warp_opencv_paper/</link>
      <pubDate>Wed, 23 Oct 2019 23:25:14 +0800</pubDate>
      
      <guid>https://konosuba.xyz/blog/image_warp_opencv_paper/</guid>
      <description>引 这学期开学的时候实验室接了个项目，要做一个类似Adobe Illustrator中的“操纵扭曲”功能的Demo
 就像这样
 需求分析 可见需要实现的功能核心就是通过鼠标的拖拽对图像进行扭曲变形，这里的变形主要可以分为两类：
  鼠标拖拽导致的普通变形
  在某一固定锚点基础上的旋转式变形
  确定方案 明确了这个后我便开始查阅资料，发现这篇paper 《Image Deformation Using Moving Least Squares》 中利用了MLS移动最小二乘来实现图像变形，其实现的效果和我们的目标极为相似，于是我也决定利用该算法来实现这个Demo
由于要利用鼠标拖拽进行操作，便选择使用Qt来进行图形化界面设计，然鹅我以前也没有用过Qt，因此学习了一些Qt基本知识
开始吧 明确了方案和目标后，便开始了漫长的学习+实践：
  程序结构框架确定
  核心算法实现
  旋转式变形的实现
  在进行到这里之后，发现程序无法实现对某个关节的单独拉伸，于是我们考虑寻找图像中的骨骼，在关节的交点添加一些锚点进行固定
 图形骨骼查找  实现效果 最终项目完成，实现了这些功能，如图是个小小的演示
 本文将会持续更新</description>
    </item>
    
    <item>
      <title>算法复杂度</title>
      <link>https://konosuba.xyz/blog/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Fri, 21 Jun 2019 10:40:29 +0800</pubDate>
      
      <guid>https://konosuba.xyz/blog/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>算法复杂度  总共N个数据 一次操作记为O(1) N次操作记为O(n) 在大部分oj判题系统中时间限制为10^6 =1s  冒泡排序  操作次数: n+(n-1)+(n-2)+&amp;hellip;+n(n-1)/2  快速排序   递归处理数组，每次将数组按照key值在其左右区分出来：比key小放左边，比key大放右边
  例: 5 6 2 4 3 8   取首位（5）为key值
  4 3 2 5 6 8
  4 3 2 5 6 8
  </description>
    </item>
    
  </channel>
</rss>
